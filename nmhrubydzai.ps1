#Requires -Version 3
#Requires -RunAsAdministrator

<#
.SYNOPSIS
    A comprehensive toolkit for Windows optimization, management, and customization.
.DESCRIPTION
    This PowerShell script provides a menu-driven interface to perform various tasks, including:
    - Managing power plans (Power Saver, Balanced, High Performance, Ultimate Performance).
    - Disabling or enabling Windows Update and Windows Security.
    - Fixing system settings like time zone, device name, and user full name.
    - Customizing the console's text color.
    - Installing essential software like Unikey, EV-Key, and WinRAR silently.
    - Providing tools for activating Windows & Office.
    - Supporting both Vietnamese and English languages for the user interface.
.AUTHOR
    Generated by Gemini for NMHRUBY
.VERSION
    1.0
#>

#region Main Script Body and Functions

function Show-Welcome-Banner {
    # Clears the screen for a fresh display
    Clear-Host

    # ASCII Art Banner
    $color = $script:currentColor
    Write-Host @"
███╗   ██╗███╗   ███╗██╗  ██╗██████╗ ██╗   ██╗██████╗ ██╗   ██╗     
████╗  ██║████╗ ████║██║  ██║██╔══██╗██║   ██║██╔══██╗╚██╗ ██╔╝     
██╔██╗ ██║██╔████╔██║███████║██████╔╝██║   ██║██████╔╝ ╚████╔╝      
██║╚██╗██║██║╚██╔╝██║██╔══██║██╔══██╗██║   ██║██╔══██╗  ╚██╔╝       
██║ ╚████║██║ ╚═╝ ██║██║  ██║██║  ██║╚██████╔╝██████╔╝   ██║        
╚═╝  ╚═══╝╚═╝     ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝ ╚═════╝    ╚═╝        
                                                                    
████████╗ ██████╗  ██████╗ ██╗     ███████╗     ██╗   ██╗   ██████╗ 
╚══██╔══╝██╔═══██╗██╔═══██╗██║     ██╔════╝     ███║  ███║   ╚════██╗
   ██║   ██║   ██║██║   ██║██║     ███████╗     ╚██║  ╚██║    █████╔╝
   ██║   ██║   ██║██║   ██║██║     ╚════██║      ██║   ██║    ╚═══██╗
   ██║   ╚██████╔╝╚██████╔╝███████╗███████╗      ██║██╗██║██╗██████╔╝
   ╚═╝    ╚═════╝  ╚═════╝ ╚══════╝╚══════╝      ╚═╝╚═╝╚═╝╚═╝╚═════╝ 
                                                                    
"@ -ForegroundColor $color

    # Display current date and time
    $currentTime = Get-Date -Format "dd/MM/yyyy HH:mm:ss"
    Write-Host "============================================================================" -ForegroundColor $color
    Write-Host "$($lang.currentTime): $currentTime" -ForegroundColor $color

    # 24-hour countdown timer
    if (-not $script:targetTime) {
        $script:targetTime = (Get-Date).AddHours(24)
    }
    $timeRemaining = New-TimeSpan -Start (Get-Date) -End $script:targetTime
    $countdown = "{0:00}:{1:00}:{2:00}" -f $timeRemaining.Hours, $timeRemaining.Minutes, $timeRemaining.Seconds
    Write-Host "$($lang.countdown): $countdown" -ForegroundColor $color
    Write-Host "============================================================================" -ForegroundColor $color
    Write-Host ""
}

#region Language Dictionaries
$script:lang_en = @{
    # General
    pressEnter   = "Press Enter to continue..."
    invalidChoice= "Invalid choice. Please try again."
    success      = "Operation completed successfully."
    failure      = "An error occurred."
    requiresAdmin= "This script requires Administrator privileges. Please re-run as Administrator."
    
    # Menu Titles
    mainMenuTitle   = "==== MAIN MENU ===="
    winOptimizeTitle= "==== WINDOWS OPTIMIZE ===="
    winDisableTitle = "==== WINDOWS DISABLE ===="
    winOptionsTitle = "==== WINDOWS OPTIONS & FIX ===="
    changeThemeTitle= "==== CHANGE THEMES ===="
    installSoftTitle= "==== INSTALL SOFTWARE ===="
    fixGuiTitle     = "==== GUI & OTHER TOOLS ===="
    aboutMeTitle    = "==== ABOUT ME ===="

    # Main Menu Options
    optOptimize     = "1. Windows Optimize"
    optDisable      = "2. Windows Disable"
    optOptionsFix   = "3. Windows Options & Fix"
    optThemes       = "4. Change Themes"
    optInstall      = "5. Install Software"
    optFixGui       = "6. GUI & Other Tools"
    optAbout        = "7. About Me"
    optExit         = "8. Exit"
    
    # Sub-menu Options
    optPowerSaver   = "1. Power saver"
    optBalanced     = "2. Balanced"
    optHighPerf     = "3. High performance"
    optUltimatePerf = "4. Ultimate performance"
    optDeletePerf   = "5. Delete Performance Plan"
    optBackToMain   = "6. Back to Main Menu"

    optWinUpdate    = "1. Windows Update"
    optWinSecurity  = "2. Windows Security"

    optFixTime      = "1. Fix Time & Date"
    optDeviceName   = "2. Change Device name"
    optUsersName    = "3. Change User Full name"

    optColorY       = "Y = Yellow"
    optColorR       = "R = Red"
    optColorB       = "B = Blue"
    optColorG       = "G = Green"
    optColorP       = "P = Purple"

    optUnikey       = "1. Download Unikey"
    optEVKey        = "2. Download EV-Key"
    optWinRAR       = "3. Download & Install WinRAR"

    optActivate     = "1. Activate Windows & Office"
    optLangVI       = "2. Change language to Tiếng Việt"
    optLangEN       = "3. Change language to English"

    # Prompts & Status
    currentTime     = "Current Time"
    countdown       = "Time Remaining in 24h Cycle"
    chooseOption    = "Choose an option: "
    confirmYN       = "(Y = Yes / N = No): "
    confirmED       = "(E = Enable / D = Disable): "
    confirmAN       = "(A = Activate All / N = No): "
    statusEnabled   = "Status: Enabled"
    statusDisabled  = "Status: Disabled"
    statusUnknown   = "Status: Unknown"
    enterNewName    = "Enter the new name: "
    enterTimezone   = "Enter the Time Zone ID (e.g., 'SE Asia Standard Time'): "
    restartNeeded   = "A restart is required for the changes to take effect."
    selectPlanToDelete = "Enter the number of the plan to delete: "
    confirmDelete   = "Are you sure you want to delete this plan? This cannot be undone."
    downloading     = "Downloading..."
    installing      = "Installing..."
    activating      = "Activating..."
    downloadedToDesktop = "File downloaded to your Desktop."
    winrarActivated = "WinRAR has been activated successfully!"
    runAsAdminPrompt= "Run the activation script? (R = Run with Administrator / N = No): "
    fileDeleted     = "The temporary file has been deleted."
    
    # Software Options
    unikeyArch      = "Choose version (64B=64-bit, 32B=32-bit, ARM=ARM64) or press Enter for auto-detect: "
    evkeyPrompt     = "Download EV-Key? "
    winrarPrompt    = "Choose action (64B=Install 64-bit, ACT=Activate) or Enter for auto-detect install: "
    
    # About Me
    aboutHeader     = "Hello, thank you for trusting and using this tool."
    aboutLine1      = "Rest assured, this tool is Coded, Built, Updated, and Shared by Nguyen Manh Hung."
    aboutLine2      = "No malicious code is included."
    aboutContact    = "For inquiries, please contact via the links below:"
}

$script:lang_vi = @{
    # General
    pressEnter   = "Nhấn Enter để tiếp tục..."
    invalidChoice= "Lựa chọn không hợp lệ. Vui lòng thử lại."
    success      = "Thao tác hoàn thành thành công."
    failure      = "Đã có lỗi xảy ra."
    requiresAdmin= "Tập lệnh này yêu cầu quyền Quản trị viên. Vui lòng chạy lại với tư cách Quản trị viên."

    # Menu Titles
    mainMenuTitle   = "==== MENU CHÍNH ===="
    winOptimizeTitle= "==== TỐI ƯU HÓA WINDOWS ===="
    winDisableTitle = "==== VÔ HIỆU HÓA WINDOWS ===="
    winOptionsTitle = "==== TÙY CHỌN & SỬA LỖI WINDOWS ===="
    changeThemeTitle= "==== THAY ĐỔI GIAO DIỆN ===="
    installSoftTitle= "==== CÀI ĐẶT PHẦN MỀM ===="
    fixGuiTitle     = "==== GIAO DIỆN & CÔNG CỤ KHÁC ===="
    aboutMeTitle    = "==== THÔNG TIN TÁC GIẢ ===="

    # Main Menu Options
    optOptimize     = "1. Tối ưu hóa Windows"
    optDisable      = "2. Vô hiệu hóa Windows"
    optOptionsFix   = "3. Tùy chọn & Sửa lỗi Windows"
    optThemes       = "4. Thay đổi Giao diện"
    optInstall      = "5. Cài đặt Phần mềm"
    optFixGui       = "6. Giao diện & Công cụ khác"
    optAbout        = "7. Thông tin Tác giả"
    optExit         = "8. Thoát"

    # Sub-menu Options
    optPowerSaver   = "1. Tiết kiệm điện"
    optBalanced     = "2. Cân bằng"
    optHighPerf     = "3. Hiệu suất cao"
    optUltimatePerf = "4. Hiệu suất tối thượng"
    optDeletePerf   = "5. Xóa Gói hiệu năng"
    optBackToMain   = "6. Quay lại Menu chính"

    optWinUpdate    = "1. Windows Update"
    optWinSecurity  = "2. Windows Security"

    optFixTime      = "1. Sửa Thời gian & Ngày"
    optDeviceName   = "2. Đổi tên Thiết bị"
    optUsersName    = "3. Đổi Tên đầy đủ Người dùng"

    optColorY       = "Y = Vàng (Yellow)"
    optColorR       = "R = Đỏ (Red)"
    optColorB       = "B = Xanh dương (Blue)"
    optColorG       = "G = Xanh lá (Green)"
    optColorP       = "P = Tím (Purple)"

    optUnikey       = "1. Tải Unikey"
    optEVKey        = "2. Tải EV-Key"
    optWinRAR       = "3. Tải & Cài đặt WinRAR"

    optActivate     = "1. Kích hoạt Windows & Office"
    optLangVI       = "2. Đổi ngôn ngữ sang Tiếng Việt"
    optLangEN       = "3. Đổi ngôn ngữ sang English"

    # Prompts & Status
    currentTime     = "Thời gian hiện tại"
    countdown       = "Thời gian còn lại trong chu kỳ 24h"
    chooseOption    = "Chọn một tùy chọn: "
    confirmYN       = "(Y = Có / N = Không): "
    confirmED       = "(E = Bật / D = Tắt): "
    confirmAN       = "(A = Kích hoạt tất cả / N = Không): "
    statusEnabled   = "Trạng thái: Đã bật"
    statusDisabled  = "Trạng thái: Đã tắt"
    statusUnknown   = "Trạng thái: Không xác định"
    enterNewName    = "Nhập tên mới: "
    enterTimezone   = "Nhập múi giờ (Ví dụ: 'SE Asia Standard Time'): "
    restartNeeded   = "Cần khởi động lại máy để áp dụng thay đổi."
    selectPlanToDelete = "Nhập số của gói hiệu năng cần xóa: "
    confirmDelete   = "Bạn có chắc chắn muốn xóa gói này không? Thao tác này không thể hoàn tác."
    downloading     = "Đang tải xuống..."
    installing      = "Đang cài đặt..."
    activating      = "Đang kích hoạt..."
    downloadedToDesktop = "Tệp đã được tải xuống màn hình Desktop của bạn."
    winrarActivated = "WinRAR đã được kích hoạt thành công!"
    runAsAdminPrompt= "Chạy tập lệnh kích hoạt? (R = Chạy với quyền Admin / N = Không): "
    fileDeleted     = "Tệp tạm thời đã được xóa."

    # Software Options
    unikeyArch      = "Chọn phiên bản (64B=64-bit, 32B=32-bit, ARM=ARM64) hoặc nhấn Enter để tự động phát hiện: "
    evkeyPrompt     = "Tải EV-Key? "
    winrarPrompt    = "Chọn hành động (64B=Cài 64-bit, ACT=Kích hoạt) hoặc Enter để tự động phát hiện và cài đặt: "

    # About Me
    aboutHeader     = "Xin chào các bạn, cảm ơn các bạn đã tin tưởng và sử dụng."
    aboutLine1      = "Yên tâm Tools được Nguyễn Mạnh Hùng Code, Build, Update, Share."
    aboutLine2      = "Không cài mã độc vào."
    aboutContact    = "Thắc mắc xin liên hệ các link bên dưới"
}
#endregion

#region Core Functions
function Set-PowerPlan {
    param(
        [string]$PlanName,
        [string]$Guid
    )
    $choice = Read-Host "$($lang.get($PlanName)) $($lang.confirmYN)"
    if ($choice -eq 'y') {
        try {
            Start-Process "powercfg" -ArgumentList "/setactive $Guid" -WindowStyle Hidden -Wait -ErrorAction Stop
            Write-Host $lang.success -ForegroundColor Green
        } catch {
            Write-Host $lang.failure -ForegroundColor Red
            Write-Host $_.Exception.Message -ForegroundColor Red
        }
    }
    Read-Host -Prompt $lang.pressEnter | Out-Null
}

function Set-UltimatePerformance {
    $choice = Read-Host "$($lang.optUltimatePerf) $($lang.confirmAN)"
    if ($choice -eq 'a') {
        try {
            # This command enables the Ultimate Performance plan if it's hidden.
            powercfg -duplicatescheme e9a42b02-d5df-448d-aa00-03f14749eb61 | Out-Null
            # This command activates it.
            Start-Process "powercfg" -ArgumentList "/setactive e9a42b02-d5df-448d-aa00-03f14749eb61" -WindowStyle Hidden -Wait -ErrorAction Stop
            Write-Host $lang.success -ForegroundColor Green
        } catch {
            Write-Host $lang.failure -ForegroundColor Red
            Write-Host $_.Exception.Message -ForegroundColor Red
        }
    }
    Read-Host -Prompt $lang.pressEnter | Out-Null
}

function Delete-PowerPlan {
    $plans = powercfg /list | Where-Object { $_ -match 'GUID:' }
    $planObjects = @()
    foreach ($plan in $plans) {
        $guid = ($plan -split 'GUID: ')[1].Split(')')[0].Trim()
        $name = ($plan -split '\) ')[1].Split('(')[0].Trim()
        $isActive = $plan.Contains('*')
        if (-not $isActive) { # Do not allow deleting the active plan
            $planObjects += [PSCustomObject]@{
                Name = $name
                Guid = $guid
            }
        }
    }

    if ($planObjects.Count -eq 0) {
        Write-Host "No deletable power plans found." -ForegroundColor Yellow
        Read-Host -Prompt $lang.pressEnter | Out-Null
        return
    }

    for ($i = 0; $i -lt $planObjects.Count; $i++) {
        Write-Host ("{0}. {1}" -f ($i + 1), $planObjects[$i].Name)
    }

    $choice = Read-Host -Prompt $lang.selectPlanToDelete
    if ($choice -match '^\d+$' -and [int]$choice -ge 1 -and [int]$choice -le $planObjects.Count) {
        $planToDelete = $planObjects[[int]$choice - 1]
        $confirm = Read-Host "$($lang.confirmDelete) $($lang.confirmYN)"
        if ($confirm -eq 'y') {
            try {
                Start-Process "powercfg" -ArgumentList "/delete $($planToDelete.Guid)" -WindowStyle Hidden -Wait -ErrorAction Stop
                Write-Host $lang.success -ForegroundColor Green
            } catch {
                Write-Host $lang.failure -ForegroundColor Red
            }
        }
    } else {
        Write-Host $lang.invalidChoice -ForegroundColor Red
    }
    Read-Host -Prompt $lang.pressEnter | Out-Null
}

function Manage-WindowsUpdate {
    # Check status of the Windows Update service (wuauserv)
    $service = Get-Service -Name wuauserv -ErrorAction SilentlyContinue
    if ($service.StartType -eq 'Disabled') {
        Write-Host $lang.statusDisabled -ForegroundColor Red
    } else {
        Write-Host $lang.statusEnabled -ForegroundColor Green
    }

    $choice = Read-Host "$($lang.optWinUpdate) $($lang.confirmED)"
    try {
        if ($choice -eq 'd') {
            # Stop the service
            Stop-Service -Name BITS -Force -ErrorAction SilentlyContinue
            Stop-Service -Name wuauserv -Force -ErrorAction SilentlyContinue
            # Disable the service
            Set-Service -Name wuauserv -StartupType Disabled -ErrorAction Stop
            # Set registry policy to prevent updates
            $regPath = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU"
            if (-not (Test-Path $regPath)) { New-Item -Path $regPath -Force | Out-Null }
            Set-ItemProperty -Path $regPath -Name "NoAutoUpdate" -Value 1 -Force
            Write-Host $lang.success -ForegroundColor Green
        }
        elseif ($choice -eq 'e') {
            # Set registry policy to allow updates
            $regPath = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU"
            if (Test-Path $regPath) {
                Set-ItemProperty -Path $regPath -Name "NoAutoUpdate" -Value 0 -Force
            }
            # Enable the service
            Set-Service -Name wuauserv -StartupType Automatic -ErrorAction Stop
            Start-Service -Name wuauserv -ErrorAction SilentlyContinue
            Write-Host $lang.success -ForegroundColor Green
        }
    } catch {
        Write-Host $lang.failure -ForegroundColor Red
        Write-Host $_.Exception.Message -ForegroundColor Red
    }
    Read-Host -Prompt $lang.pressEnter | Out-Null
}

function Manage-WindowsSecurity {
    # Check status via registry
    $regPath = "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender"
    $status = Get-ItemProperty -Path $regPath -Name "DisableAntiSpyware" -ErrorAction SilentlyContinue
    if ($status -and $status.DisableAntiSpyware -eq 1) {
        Write-Host $lang.statusDisabled -ForegroundColor Red
    } else {
        Write-Host $lang.statusEnabled -ForegroundColor Green
    }

    $choice = Read-Host "$($lang.optWinSecurity) $($lang.confirmED)"
    try {
        if (-not (Test-Path $regPath)) { New-Item -Path $regPath -Force | Out-Null }
        if ($choice -eq 'd') {
            Set-ItemProperty -Path $regPath -Name "DisableAntiSpyware" -Value 1 -Force
            Write-Host "$($lang.success) $($lang.restartNeeded)" -ForegroundColor Green
        }
        elseif ($choice -eq 'e') {
            Set-ItemProperty -Path $regPath -Name "DisableAntiSpyware" -Value 0 -Force
            Write-Host "$($lang.success) $($lang.restartNeeded)" -ForegroundColor Green
        }
    } catch {
        Write-Host $lang.failure -ForegroundColor Red
        Write-Host $_.Exception.Message -ForegroundColor Red
    }
    Read-Host -Prompt $lang.pressEnter | Out-Null
}

function Fix-TimeDate {
    $currentTimezone = Get-TimeZone
    Write-Host "Current Time Zone: $($currentTimezone.DisplayName)"
    $tz = Read-Host -Prompt $lang.enterTimezone
    if (-not [string]::IsNullOrWhiteSpace($tz)) {
        try {
            Set-TimeZone -Id $tz -ErrorAction Stop
            # Force sync time with server
            w32tm /resync /force | Out-Null
            Write-Host $lang.success -ForegroundColor Green
        } catch {
            Write-Host "$($lang.failure) Invalid Time Zone ID." -ForegroundColor Red
        }
    }
    Read-Host -Prompt $lang.pressEnter | Out-Null
}

function Change-DeviceName {
    Write-Host "Current device name: $env:COMPUTERNAME"
    $newName = Read-Host -Prompt $lang.enterNewName
    if (-not [string]::IsNullOrWhiteSpace($newName)) {
        $confirm = Read-Host "$($lang.confirmYN)"
        if ($confirm -eq 'y') {
            try {
                Rename-Computer -NewName $newName -Force -ErrorAction Stop
                Write-Host "$($lang.success) $($lang.restartNeeded)" -ForegroundColor Green
            } catch {
                Write-Host $lang.failure -ForegroundColor Red
            }
        }
    }
    Read-Host -Prompt $lang.pressEnter | Out-Null
}

function Change-UserFullName {
    $currentUser = $env:USERNAME
    $currentFullName = (Get-LocalUser -Name $currentUser).FullName
    Write-Host "Current user: $currentUser"
    Write-Host "Current full name: $currentFullName"
    $newName = Read-Host -Prompt $lang.enterNewName
    if (-not [string]::IsNullOrWhiteSpace($newName)) {
        $confirm = Read-Host "$($lang.confirmYN)"
        if ($confirm -eq 'y') {
            try {
                Set-LocalUser -Name $currentUser -FullName $newName -ErrorAction Stop
                Write-Host $lang.success -ForegroundColor Green
            } catch {
                Write-Host "$($lang.failure): Could not set full name. Ensure you are running as Admin." -ForegroundColor Red
            }
        }
    }
    Read-Host -Prompt $lang.pressEnter | Out-Null
}

function Download-File {
    param(
        [string]$Url,
        [string]$FileName
    )
    $desktopPath = [System.Environment]::GetFolderPath('Desktop')
    $destination = Join-Path -Path $desktopPath -ChildPath $FileName
    Write-Host "$($lang.downloading) $FileName..." -ForegroundColor Yellow
    try {
        Invoke-WebRequest -Uri $Url -OutFile $destination -ErrorAction Stop
        Write-Host "$($lang.success) $($lang.downloadedToDesktop)" -ForegroundColor Green
        return $destination
    } catch {
        Write-Host "$($lang.failure) Could not download file." -ForegroundColor Red
        Write-Host $_.Exception.Message -ForegroundColor Red
        return $null
    }
}

function Get-SystemArch {
    $arch = (Get-CimInstance -ClassName Win32_OperatingSystem).OSArchitecture
    if ($arch -eq '64-bit') { return '64B' }
    if ($arch -eq '32-bit') { return '32B' }
    if ($arch -like '*ARM*') { return 'ARM' }
    return '64B' # Default
}

function Install-Unikey {
    $detectedArch = Get-SystemArch
    Write-Host "Auto-detected architecture: $detectedArch"
    $choice = Read-Host -Prompt $lang.unikeyArch
    if ([string]::IsNullOrWhiteSpace($choice)) {
        $choice = $detectedArch
    }

    $urls = @{
        '64B' = 'https://www.unikey.org/assets/release/unikey46RC2-230919-win64.zip'
        '32B' = 'https://www.unikey.org/assets/release/unikey46RC2-230919-win32.zip'
        'ARM' = 'https://www.unikey.org/assets/release/unikey46RC2-250531-arm64.zip'
    }

    $url = $urls[$choice.ToUpper()]
    if ($url) {
        $fileName = $url.Split('/')[-1]
        Download-File -Url $url -FileName $fileName
    } else {
        Write-Host $lang.invalidChoice -ForegroundColor Red
    }
    Read-Host -Prompt $lang.pressEnter | Out-Null
}

function Install-EVKey {
    $choice = Read-Host -Prompt "$($lang.evkeyPrompt)$($lang.confirmYN)"
    if ($choice -eq 'y') {
        $url = 'https://github.com/lamquangminh/EVKey/releases/download/Release/EVKey.zip'
        $fileName = 'EVKey.zip'
        Download-File -Url $url -FileName $fileName
    }
    Read-Host -Prompt $lang.pressEnter | Out-Null
}

function Install-WinRAR {
    $detectedArch = Get-SystemArch
    Write-Host "Auto-detected architecture: $detectedArch"
    $choice = Read-Host -Prompt $lang.winrarPrompt
    
    if ($choice.ToUpper() -eq 'ACT') {
        Activate-WinRAR
    } else {
        # Default to installing
        $url = 'https://www.win-rar.com/fileadmin/winrar-versions/winrar/winrar-x64-712.exe'
        $fileName = 'winrar-x64-712.exe'
        
        $exePath = Download-File -Url $url -FileName $fileName
        if ($exePath) {
            Write-Host "$($lang.installing)..." -ForegroundColor Yellow
            try {
                Start-Process -FilePath $exePath -ArgumentList "/S" -Wait -ErrorAction Stop
                Write-Host "$($lang.success)" -ForegroundColor Green
                # Ask to activate after install
                $activateChoice = Read-Host "Installation complete. Activate WinRAR now? $($lang.confirmYN)"
                if ($activateChoice -eq 'y') {
                    Activate-WinRAR
                }
            } catch {
                Write-Host "$($lang.failure) Could not install WinRAR." -ForegroundColor Red
            }
        }
    }
    Read-Host -Prompt $lang.pressEnter | Out-Null
}

function Activate-WinRAR {
    Write-Host "$($lang.activating)..." -ForegroundColor Yellow
    $keyUrl = 'https://raw.githubusercontent.com/hungthichcode/nmhruby-tools-windows/master/rarreg.key'
    $winrarPath = "C:\Program Files\WinRAR"
    if (-not (Test-Path $winrarPath)) {
        Write-Host "WinRAR is not installed in the default location. Cannot activate." -ForegroundColor Red
        return
    }
    $destination = Join-Path -Path $winrarPath -ChildPath "rarreg.key"
    try {
        Invoke-WebRequest -Uri $keyUrl -OutFile $destination -ErrorAction Stop
        Write-Host $lang.winrarActivated -ForegroundColor Green
    } catch {
        Write-Host "$($lang.failure) Could not download or save activation key." -ForegroundColor Red
    }
}

function Activate-WindowsOffice {
    $url = 'https://raw.githubusercontent.com/hungthichcode/nmhruby-tools-windows/master/NMHRUBY.bat'
    $fileName = 'NMHRUBY.bat'
    $filePath = Download-File -Url $url -FileName $fileName
    if ($filePath) {
        $choice = Read-Host -Prompt $lang.runAsAdminPrompt
        if ($choice -eq 'r') {
            try {
                Start-Process -FilePath $filePath -Verb RunAs -ErrorAction Stop
            } catch {
                Write-Host "$($lang.failure) Could not start the script." -ForegroundColor Red
            }
        }
        # Clean up the file
        Remove-Item -Path $filePath -Force
        Write-Host $lang.fileDeleted -ForegroundColor Yellow
    }
    Read-Host -Prompt $lang.pressEnter | Out-Null
}

#endregion

#region Menus
function Show-Optimize-Menu {
    while ($true) {
        Show-Welcome-Banner
        Write-Host $lang.winOptimizeTitle -ForegroundColor $script:currentColor
        Write-Host "------------------------" -ForegroundColor $script:currentColor
        Write-Host $lang.optPowerSaver
        Write-Host $lang.optBalanced
        Write-Host $lang.optHighPerf
        Write-Host $lang.optUltimatePerf
        Write-Host $lang.optDeletePerf
        Write-Host $lang.optBackToMain
        Write-Host "------------------------" -ForegroundColor $script:currentColor
        $choice = Read-Host -Prompt $lang.chooseOption

        switch ($choice) {
            '1' { Set-PowerPlan -PlanName "optPowerSaver" -Guid 'a1841308-3541-4fab-bc81-f71556f20b4a' }
            '2' { Set-PowerPlan -PlanName "optBalanced" -Guid '381b4222-f694-41f0-9685-ff5bb260df2e' }
            '3' { Set-PowerPlan -PlanName "optHighPerf" -Guid '8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c' }
            '4' { Set-UltimatePerformance }
            '5' { Delete-PowerPlan }
            '6' { return }
            default { Write-Host $lang.invalidChoice -ForegroundColor Red; Sleep 2 }
        }
    }
}

function Show-Disable-Menu {
    while ($true) {
        Show-Welcome-Banner
        Write-Host $lang.winDisableTitle -ForegroundColor $script:currentColor
        Write-Host "------------------------" -ForegroundColor $script:currentColor
        Write-Host $lang.optWinUpdate
        Write-Host $lang.optWinSecurity
        Write-Host "3. $($lang.optBackToMain.Split(' ')[-1])" # Quick way to get "Back"
        Write-Host "------------------------" -ForegroundColor $script:currentColor
        $choice = Read-Host -Prompt $lang.chooseOption

        switch ($choice) {
            '1' { Manage-WindowsUpdate }
            '2' { Manage-WindowsSecurity }
            '3' { return }
            default { Write-Host $lang.invalidChoice -ForegroundColor Red; Sleep 2 }
        }
    }
}

function Show-OptionsFix-Menu {
    while ($true) {
        Show-Welcome-Banner
        Write-Host $lang.winOptionsTitle -ForegroundColor $script:currentColor
        Write-Host "------------------------" -ForegroundColor $script:currentColor
        Write-Host $lang.optFixTime
        Write-Host $lang.optDeviceName
        Write-Host $lang.optUsersName
        Write-Host "4. $($lang.optBackToMain.Split(' ')[-1])"
        Write-Host "------------------------" -ForegroundColor $script:currentColor
        $choice = Read-Host -Prompt $lang.chooseOption

        switch ($choice) {
            '1' { Fix-TimeDate }
            '2' { Change-DeviceName }
            '3' { Change-UserFullName }
            '4' { return }
            default { Write-Host $lang.invalidChoice -ForegroundColor Red; Sleep 2 }
        }
    }
}

function Show-Theme-Menu {
    Show-Welcome-Banner
    Write-Host $lang.changeThemeTitle -ForegroundColor $script:currentColor
    Write-Host "------------------------" -ForegroundColor $script:currentColor
    Write-Host $lang.optColorY
    Write-Host $lang.optColorR
    Write-Host $lang.optColorB
    Write-Host $lang.optColorG
    Write-Host $lang.optColorP
    Write-Host "------------------------" -ForegroundColor $script:currentColor
    $choice = Read-Host -Prompt $lang.chooseOption
    switch ($choice.ToUpper()) {
        'Y' { $script:currentColor = 'Yellow' }
        'R' { $script:currentColor = 'Red' }
        'B' { $script:currentColor = 'Blue' }
        'G' { $script:currentColor = 'Green' }
        'P' { $script:currentColor = 'Magenta' } # Purple is Magenta in PS
    }
}

function Show-Install-Menu {
    while ($true) {
        Show-Welcome-Banner
        Write-Host $lang.installSoftTitle -ForegroundColor $script:currentColor
        Write-Host "------------------------" -ForegroundColor $script:currentColor
        Write-Host $lang.optUnikey
        Write-Host $lang.optEVKey
        Write-Host $lang.optWinRAR
        Write-Host "4. $($lang.optBackToMain.Split(' ')[-1])"
        Write-Host "------------------------" -ForegroundColor $script:currentColor
        $choice = Read-Host -Prompt $lang.chooseOption

        switch ($choice) {
            '1' { Install-Unikey }
            '2' { Install-EVKey }
            '3' { Install-WinRAR }
            '4' { return }
            default { Write-Host $lang.invalidChoice -ForegroundColor Red; Sleep 2 }
        }
    }
}

function Show-GuiFix-Menu {
    while ($true) {
        Show-Welcome-Banner
        Write-Host $lang.fixGuiTitle -ForegroundColor $script:currentColor
        Write-Host "------------------------" -ForegroundColor $script:currentColor
        Write-Host $lang.optActivate
        Write-Host $lang.optLangVI
        Write-Host $lang.optLangEN
        Write-Host "4. $($lang.optBackToMain.Split(' ')[-1])"
        Write-Host "------------------------" -ForegroundColor $script:currentColor
        $choice = Read-Host -Prompt $lang.chooseOption

        switch ($choice) {
            '1' { Activate-WindowsOffice }
            '2' { $script:lang = $script:lang_vi }
            '3' { $script:lang = $script:lang_en }
            '4' { return }
            default { Write-Host $lang.invalidChoice -ForegroundColor Red; Sleep 2 }
        }
    }
}

function Show-About-Me {
    Show-Welcome-Banner
    Write-Host $lang.aboutMeTitle -ForegroundColor $script:currentColor
    Write-Host "------------------------" -ForegroundColor $script:currentColor
    Write-Host $lang.aboutHeader
    Write-Host $lang.aboutLine1
    Write-Host $lang.aboutLine2
    Write-Host ""
    Write-Host $lang.aboutContact
    Write-Host "[Facebook] = https://www.facebook.com/NMHRUBY"
    Write-Host "[Github]   = https://github.com/hungthichcode"
    Write-Host "[Website]  = https://hungthichcode.github.io/nmhruby/"
    Write-Host "------------------------" -ForegroundColor $script:currentColor
    Read-Host -Prompt $lang.pressEnter | Out-Null
}

#endregion

# --- SCRIPT ENTRY POINT ---

# Initial setup
$script:lang = $script:lang_vi # Default to Vietnamese
$script:currentColor = 'Green' # Default color
$script:targetTime = $null # Initialize countdown timer

# Main application loop
while ($true) {
    Show-Welcome-Banner
    
    # Display Main Menu
    Write-Host $lang.mainMenuTitle -ForegroundColor $script:currentColor
    Write-Host "------------------------" -ForegroundColor $script:currentColor
    Write-Host $lang.optOptimize
    Write-Host $lang.optDisable
    Write-Host $lang.optOptionsFix
    Write-Host $lang.optThemes
    Write-Host $lang.optInstall
    Write-Host $lang.optFixGui
    Write-Host $lang.optAbout
    Write-Host $lang.optExit
    Write-Host "------------------------" -ForegroundColor $script:currentColor

    $choice = Read-Host -Prompt $lang.chooseOption

    switch ($choice) {
        '1' { Show-Optimize-Menu }
        '2' { Show-Disable-Menu }
        '3' { Show-OptionsFix-Menu }
        '4' { Show-Theme-Menu }
        '5' { Show-Install-Menu }
        '6' { Show-GuiFix-Menu }
        '7' { Show-About-Me }
        '8' { exit }
        default {
            Write-Host $lang.invalidChoice -ForegroundColor Red
            Sleep 2
        }
    }
}

#endregion
